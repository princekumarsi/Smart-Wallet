//Prince kuamr singh
pragma solidity ^0.8.0;

contract SmartWallet {
    address[] public owners;
    mapping(address => bool) public isOwner;
    uint public requiredApprovals;
    uint public dailyLimit;
    uint public lastWithdrawTime;
    uint public spentToday;

    mapping(uint => Transaction) public transactions;
    uint public transactionCount;

    struct Transaction {
        address to;
        uint value;
        bool executed;
        uint approvals;
    }

    mapping(uint => mapping(address => bool)) public approved;

    event Deposit(address indexed sender, uint amount);
    event Submission(uint indexed transactionId);
    event Approval(address indexed owner, uint indexed transactionId);
    event Execution(uint indexed transactionId);
    event OwnerAddition(address indexed owner);
    event OwnerRemoval(address indexed owner);
    event DailyLimitChange(uint dailyLimit);

    modifier onlyOwner() {
        require(isOwner[msg.sender], "Not an owner");
        _;
    }

    modifier transactionExists(uint transactionId) {
        require(transactions[transactionId].to != address(0), "Transaction does not exist");
        _;
    }

    modifier notExecuted(uint transactionId) {
        require(!transactions[transactionId].executed, "Transaction already executed");
        _;
    }

    modifier notApproved(uint transactionId) {
        require(!approved[transactionId][msg.sender], "Transaction already approved by owner");
        _;
    }

    constructor(address[] memory _owners, uint _requiredApprovals, uint _dailyLimit) {
        require(_owners.length > 0, "Owners required");
        require(_requiredApprovals > 0 && _requiredApprovals <= _owners.length, "Invalid number of required approvals");

        for (uint i = 0; i < _owners.length; i++) {
            address owner = _owners[i];
            require(owner != address(0), "Invalid owner");
            require(!isOwner[owner], "Owner not unique");

            isOwner[owner] = true;
            owners.push(owner);
        }

        requiredApprovals = _requiredApprovals;
        dailyLimit = _dailyLimit;
    }

    receive() external payable {
        emit Deposit(msg.sender, msg.value);
    }

    function submitTransaction(address _to, uint _value) public onlyOwner {
        uint transactionId = transactionCount;
        transactions[transactionId] = Transaction({
            to: _to,
            value: _value,
            executed: false,
            approvals: 0
        });
        transactionCount += 1;
        emit Submission(transactionId);
    }

    function approveTransaction(uint transactionId) public onlyOwner transactionExists(transactionId) notExecuted(transactionId) notApproved(transactionId) {
        approved[transactionId][msg.sender] = true;
        transactions[transactionId].approvals += 1;
        emit Approval(msg.sender, transactionId);
        if (transactions[transactionId].approvals >= requiredApprovals) {
            executeTransaction(transactionId);
        }
    }

    function executeTransaction(uint transactionId) public onlyOwner transactionExists(transactionId) notExecuted(transactionId) {
        require(transactions[transactionId].approvals >= requiredApprovals, "Not enough approvals");
        Transaction storage transaction = transactions[transactionId];

        if (transaction.value > dailyLimit) {
            require(block.timestamp > lastWithdrawTime + 24 hours, "Daily limit reached");
            spentToday = transaction.value;
            lastWithdrawTime = block.timestamp;
        } else {
            if (block.timestamp > lastWithdrawTime + 24 hours) {
                spentToday = transaction.value;
            } else {
                spentToday += transaction.value;
            }
            require(spentToday <= dailyLimit, "Daily limit exceeded");
            lastWithdrawTime = block.timestamp;
        }

        (bool success, ) = transaction.to.call{value: transaction.value}("");
        require(success, "Transaction execution failed");

        transaction.executed = true;
        emit Execution(transactionId);
    }

    function addOwner(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Invalid owner");
        require(!isOwner[newOwner], "Address is already an owner");
        isOwner[newOwner] = true;
        owners.push(newOwner);
        emit OwnerAddition(newOwner);
    }

    function removeOwner(address ownerToRemove) public onlyOwner {
        require(isOwner[ownerToRemove], "Not an owner");
        require(owners.length > requiredApprovals, "Cannot remove owner, minimum required owners reached");
        isOwner[ownerToRemove] = false;
        for (uint i = 0; i < owners.length; i++) {
            if (owners[i] == ownerToRemove) {
                owners[i] = owners[owners.length - 1];
                owners.pop();
                break;
            }
        }
        emit OwnerRemoval(ownerToRemove);
    }

    function changeDailyLimit(uint newLimit) public onlyOwner {
        dailyLimit = newLimit;
        emit DailyLimitChange(newLimit);
    }

    function getOwners() public view returns (address[] memory) {
        return owners;
    }

    function getTransactionCount() public view returns (uint) {
        return transactionCount;
    }

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}